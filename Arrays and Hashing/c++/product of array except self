/* Optimmized solution using two pass over nums array and prefix and postfix 
calculations
Time complexity: O(2n) = O(n)
Space complexity: O(1)

*/
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> ans;
        int pre = 1, post = 1; 
        
        for(int i = 0; i < nums.size(); i++){
            ans.push_back(pre);
            pre *= nums[i];
            //cout << pre << endl;
            //cout << nums[i];
        }
        
        for(int j = ans.size() -1; j>= 0; j--){
            ans[j] *= post;
            post *= nums[j];
        }
        
        return ans;
    }
};
