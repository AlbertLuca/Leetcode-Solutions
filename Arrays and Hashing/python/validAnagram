# /*Brute force solution by comparing sorted strings s and t 
# Time complexity: O(n)
# Space complexity: O(n)
# */
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s)  == sorted(t)
        
        
        # Optimized Solution using hashmap to compare numbers of chars in each hashmap
# Time complexity: O(n)
# Space complexity: O(n)
# 1. create hashmap for each string s and t
# 2. in a for loop count each char 
# 3. compare hashmaps
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        
        smap, tmap = {} , {}
        
        for i in range(len(s)):
            smap[s[i]] = 1 + smap.get(s[i], 0)
            tmap[t[i]] = 1 + tmap.get(t[i], 0)
                                      
        return tmap == smap
        

# Time complexity: O(n + m) where n is the length of s and m is the length of t
# Space complexity: O(n + m) where n is the length of s and m is the length of t
# 1. Create two dictionaries to store the frequency of each character in the strings s and t
# 2. Compare the two dictionaries
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        
        # Anagrams must be the same length
        if len(s) != len(t):
            return False

        # Count the freq of each character in both strings
        sCount = Counter(s)
        tCount = Counter(t)

        #Compare the two frequency dictionaries
        return sCount == tCount
